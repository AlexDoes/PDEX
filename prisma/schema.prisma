generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  role            Role              @default(USER)
  id              String            @id @default(cuid())
  email           String            @unique
  name            String            @default("Plant Lover")
  password        String?
  ownedPlants     UniquePlant[]     @relation("UniquePlants")
  favoritePlants  Favorites[]
  plantCollection PlantCollection[]
  nickname        String?           @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  UniquePlant     UniquePlant?      @relation(fields: [uniquePlantId], references: [id])
  uniquePlantId   String?

  @@index([email], name: "email")
}

model Plant {
  id              String   @id @default(cuid())
  name            String   @unique
  common_name     String?
  scientific_name String[]
  other_names     String[]
  default_image   String[]
  description     String?
  image           String?
  species         String?
  water           String?
  light           String?
}

model UniquePlant {
  id                String            @id @default(cuid())
  name              String
  description       String
  image             String
  species           String?
  water             String?
  light             String?
  ownedBy           User              @relation("UniquePlants", references: [id], fields: [ownerId])
  ownerId           String
  species2          String?
  favoritedBy       User[]
  collectionsPartOf PlantCollection[]
  plantHeight       String?
  plantWidth        String?
  plantDepth        String?
  plantWeight       String?
  Favorites         Favorites[]
}

model Favorites {
  id      String      @id @default(cuid())
  plantId String
  userId  String
  plant   UniquePlant @relation(fields: [plantId], references: [id])
  user    User        @relation(fields: [userId], references: [id])
}

model PlantCollection {
  id            String        @id @default(cuid())
  name          String
  plantContents UniquePlant[]
  owner         User          @relation(fields: [ownerId], references: [id])
  ownerId       String
}

enum Role {
  USER
  EDITOR
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
