generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // url      = env("POSTGRES_PRISMA_URL")
  // directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  // shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
  // url      = env("DEVELOPMENT_DB_URL")
}

model User {
  role            Role              @default(USER)
  id              String            @id @default(cuid())
  email           String            @unique
  name            String            @default("Plant Lover")
  nickname        String?           @unique
  username        String?           @unique
  description     String?           @default("I love plants! I'm not sure what to say about myself yet but check in later!")
  password        String?
  emailVerified   DateTime?
  image           String?
  ownedPlants     UniquePlant[]     @relation("UniquePlants")
  plantCollection PlantCollection[]
  accounts        Account[]
  sessions        Session[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  Like            Like[]
  Comments        Comments[]
  Following       Follows[]         @relation("follower")
  Follower        Follows[]         @relation("following")

  @@index([email], name: "email")
}

model Plant {
  id              String   @id @default(cuid())
  name            String   @unique
  common_name     String?
  scientific_name String[]
  other_names     String[]
  default_image   String[]
  description     String?
  image           String?
  species         String?
  water           String?
  light           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt
}

model UniquePlant {
  id                   String                 @id @default(cuid())
  name                 String
  description          String?
  image                String
  species              String?
  normalized_species   String?
  water                String?
  light                String?
  ownedBy              User                   @relation("UniquePlants", references: [id], fields: [ownerId], onDelete: Cascade)
  ownerId              String
  species2             String?
  normalized_species2  String?
  collectionsPartOf    PlantCollection[]
  plantHeight          String?
  plantWidth           String?
  plantDepth           String?
  plantWeight          String?
  ImageOrderCollection ImageOrderCollection[]
  Leaves               Leaves[]
  Comments             Comments[]             @relation("UniquePlantComments")
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @default(now()) @updatedAt
  likes                Like[]
}

model PlantCollection {
  id                   String                 @id @default(cuid())
  name                 String
  plantContents        UniquePlant[]
  owner                User                   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId              String
  public               Boolean                @default(true)
  description          String?
  ImageOrderCollection ImageOrderCollection[]
  weight               Int                    @default(0)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @default(now()) @updatedAt
  likes                Like[]
  Comments             Comments[]
}

model ImageOrderCollection {
  id           String          @id @default(cuid())
  plant        UniquePlant     @relation(fields: [plantId], references: [id], onDelete: Cascade)
  plantId      String
  collection   PlantCollection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId String
  position     Int             @default(0)
}

model Leaves {
  id          String      @id @default(cuid())
  name        String
  description String?
  image       String?
  plant       UniquePlant @relation(fields: [plantId], references: [id])
  plantId     String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now()) @updatedAt
}

enum Role {
  USER
  EDITOR
  ADMIN
}

model Comments {
  id           String           @id @default(cuid())
  text         String
  author       User             @relation(fields: [authorId], references: [id], onDelete: Cascade)
  plant        UniquePlant?     @relation("UniquePlantComments", fields: [plantId], references: [id], onDelete: Cascade)
  collection   PlantCollection? @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  authorId     String
  plantId      String?
  collectionId String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @default(now()) @updatedAt
  Like         Like[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Like {
  id           String           @id @default(cuid())
  User         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  collection   PlantCollection? @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  plants       UniquePlant?     @relation(fields: [plantId], references: [id], onDelete: Cascade)
  userId       String
  collectionId String?
  plantId      String?
  isFavorite   Boolean          @default(false)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @default(now()) @updatedAt
  Comments     Comments?        @relation(fields: [commentsId], references: [id])
  commentsId   String?

  @@unique([plantId, userId])
  @@unique([collectionId, userId])
}

model Follows {
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String

  @@id([followerId, followingId])
}
